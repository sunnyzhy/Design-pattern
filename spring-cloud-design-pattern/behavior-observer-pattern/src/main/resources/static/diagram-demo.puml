@startuml

Subject o-- Observer

interface Subject {
  +void add(Observer)
  +void remove(Observer)
  +void notify(String message)
}

interface Observer {
  +void update(String message)
}

class Mouse implements Subject {
  -List<Observer> observerList

  +void add(Observer)
  +void remove(Observer)
  +void notify(String message)
}

class Cat implements Observer, Subject {
  -STATE state
  -List<Observer> observerList

  +Cat()
  +void add(Observer)
  +void remove(Observer)
  +void notify(String message)
  +void update(String message)
}

class Dog implements Observer, Subject {
  -STATE state
  -List<Observer> observerList

  +Dog()
  +void add(Observer)
  +void remove(Observer)
  +void notify(String message)
  +void update(String message)
}

class Baby implements Observer {
  -STATE state

  +Baby()
  +void update(String message)
}

class Master implements Observer {
  -STATE state

  +Master()
  +void update(String message)
}

note as N
    public void update(String message) {
        this.state = STATE;
        System.out.println(message + " ---> " + this.state.name);
        notify(this.state.name);
    }
end note

note as M
    public void update(String message) {
        this.state = STATE;
        System.out.println(message + " ---> " + this.state.name);
    }
end note

Cat .. N
Dog .. N

Baby .. M
Master .. M

@enduml